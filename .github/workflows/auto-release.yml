name: Auto Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for version calculation

    - name: Check commit message and determine version bump
      id: version_check
      run: |
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MESSAGE"

        # Get current version from latest tag
        CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Current version: $CURRENT_TAG"

        # Extract version numbers (remove 'v' prefix)
        VERSION=${CURRENT_TAG#v}
        IFS='.' read -r major minor patch <<< "$VERSION"

        # Default: no release
        SHOULD_RELEASE=false
        NEW_VERSION=""

        # Check for release patterns
        if [[ $COMMIT_MESSAGE =~ ^fix[[:space:]]*-[[:space:]]* ]]; then
          # PATCH: fix - something
          NEW_VERSION="v$major.$minor.$((patch + 1))"
          SHOULD_RELEASE=true
          echo "Detected FIX: patch release $NEW_VERSION"
        elif [[ $COMMIT_MESSAGE =~ ^drop[[:space:]]*-[[:space:]]* ]]; then
          # MINOR: drop - something
          NEW_VERSION="v$major.$((minor + 1)).0"
          SHOULD_RELEASE=true
          echo "Detected DROP: minor release $NEW_VERSION"
        elif [[ $COMMIT_MESSAGE =~ ^EVA[[:space:]]+Launch[[:space:]]*-[[:space:]]* ]]; then
          # MAJOR: EVA Launch - something
          NEW_VERSION="v$((major + 1)).0.0"
          SHOULD_RELEASE=true
          echo "Detected EVA LAUNCH: major release $NEW_VERSION"
        else
          echo "No release pattern found in commit message"
        fi

        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create release tag
      if: steps.version_check.outputs.should_release == 'true'
      run: |
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)

        echo "Creating tag: $NEW_VERSION"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Create annotated tag with commit message
        git tag -a "$NEW_VERSION" -m "$COMMIT_MESSAGE"
        git push origin "$NEW_VERSION"

        echo "Auto-release tag $NEW_VERSION created and pushed!"

    - name: Set up Go
      if: steps.version_check.outputs.should_release == 'true'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build binaries
      if: steps.version_check.outputs.should_release == 'true'
      run: |
        # Extract version from new version output
        VERSION="${{ steps.version_check.outputs.new_version }}"

        # Build flags
        LDFLAGS="-X github.com/DeprecatedLuar/better-curl-saul/src/project/utils.Version=${VERSION}"

        # Linux
        GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o saul-linux-amd64 cmd/main.go
        GOOS=linux GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o saul-linux-arm64 cmd/main.go

        # macOS
        GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o saul-darwin-amd64 cmd/main.go
        GOOS=darwin GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o saul-darwin-arm64 cmd/main.go

        # Windows
        GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o saul-windows-amd64.exe cmd/main.go
        GOOS=windows GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o saul-windows-arm64.exe cmd/main.go

    - name: Create GitHub Release
      if: steps.version_check.outputs.should_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version_check.outputs.new_version }}
        name: ${{ steps.version_check.outputs.new_version }}
        body: |
          ${{ github.event.head_commit.message }}

          ## Binaries
          - **Linux**: saul-linux-amd64, saul-linux-arm64
          - **macOS**: saul-darwin-amd64, saul-darwin-arm64
          - **Windows**: saul-windows-amd64.exe, saul-windows-arm64.exe
        files: |
          saul-linux-amd64
          saul-linux-arm64
          saul-darwin-amd64
          saul-darwin-arm64
          saul-windows-amd64.exe
          saul-windows-arm64.exe
        generate_release_notes: true
        prerelease: ${{ contains(steps.version_check.outputs.new_version, 'beta') || contains(steps.version_check.outputs.new_version, 'alpha') || contains(steps.version_check.outputs.new_version, 'rc') }}

    - name: Log result
      run: |
        if [[ "${{ steps.version_check.outputs.should_release }}" == "true" ]]; then
          echo "Auto-release completed: ${{ steps.version_check.outputs.new_version }}"
          echo "✅ Tag created and pushed"
          echo "✅ Binaries built for all platforms"
          echo "✅ GitHub release created with assets"
        else
          echo "No auto-release pattern found - skipping"
        fi