# Flag System Features Specification

## Overview
Add comprehensive flag system to Better-Curl (Saul) with two main categories: variable management and response configuration. All features leverage existing architecture patterns.

## Feature 1: Variable Management Flags

### Purpose
Allow users to update hard variables during `call` command with pre-filled editing interface.

### Commands
```bash
saul call -v                    # Update all hard variables
saul call -v token apikey       # Update specific hard variables only
saul call --vars token          # Alternative long form
```

### Behavior
- Prompts user for hard variables with current values pre-filled
- Uses existing readline editing (same as `edit` command)
- User can edit, clear, or press Enter to keep current value
- Soft variables still prompt normally (no change)
- Updated values save to variables.toml
- Request execution continues normally after variable collection

### Example Flow
```bash
# Current variables: token="abc123", apikey="def456"
saul api call -v
# Prompts appear:
# token [abc123]: ← user can edit or press Enter
# apikey [def456]: ← user can edit or press Enter
# (then normal HTTP request execution)

saul api call -v token
# Only prompts:
# token [abc123]: ← user can edit or press Enter
# (apikey uses stored value, no prompt)
```

## Feature 2: Response Configuration System

### Purpose
Configure persistent response display defaults per preset, with temporary override capability.

### Persistent Configuration Commands
```bash
saul set response --raw         # All responses show raw JSON
saul set response --headers-only # All responses show headers only
saul set response --body-only   # All responses show body content only  
saul set response --status-only # All responses show status line only

saul rm response --raw          # Remove raw setting (back to default)
saul rm response --headers-only # Remove format setting (back to default)
```

### Override Commands (Temporary)
```bash
saul call --raw                 # This request only: raw output
saul call --headers-only        # This request only: headers only
saul get response 1 --body-only # This view only: body only
saul get history --status-only  # This listing only: status only
```

### Storage
- Settings save to new file: `config.toml` in preset directory
- Uses lazy file creation (created when first setting applied)
- Format: `raw = true`, `format = "headers-only"`

### Behavior Rules
1. **Default**: Without configuration, responses show full formatted content (current behavior)
2. **Persistent**: `set response --flag` affects ALL future response viewing for that preset
3. **Override**: `command --flag` overrides persistent setting for that single operation
4. **Unified**: Same configuration applies to live calls and history viewing

## Feature 3: Request Debugging

### Purpose
Show request details without executing HTTP call.

### Command
```bash
saul call --dry-run
```

### Behavior
- Processes all variables and builds complete request
- Displays method, URL, headers, and body
- Does NOT send HTTP request
- Does NOT save to history
- Example output:
```
POST https://api.example.com/users
Headers: 
  Authorization: Bearer abc123
  Content-Type: application/json
Body: 
  {"name": "pikachu", "level": 25}

(Request not sent - dry run mode)
```

## Technical Requirements

### Command Structure Changes
- Extend existing `Command` struct with new flag fields
- Reuse existing flag parsing infrastructure (`--raw` already works)
- Support context-aware flag parsing (same flag, different meaning based on command)

### File System
- Add `config.toml` to preset directory structure
- Follow existing lazy creation pattern
- Use existing TOML manipulation logic

### Integration Points
- Variable management: Extend existing `PromptForVariables()` function
- Response formatting: Extend existing response display logic
- Flag parsing: Extend existing parser in `core/parser.go`

## Success Criteria

### Variable Management
- `-v` prompts all hard variables with pre-filled current values
- `-v var1 var2` prompts only specified variables  
- Editing interface matches existing `edit` command behavior
- Updated values persist to variables.toml

### Response Configuration
- `set response --flag` saves persistent setting to config.toml
- All response viewing (call, get response, get history) respects persistent settings
- Temporary overrides (`call --flag`, `get --flag`) work correctly
- `rm response --flag` removes persistent setting

### Request Debugging
- `--dry-run` shows complete request details without sending
- Variable substitution works correctly in dry run
- Output format is clear and informative

### General
- Zero breaking changes to existing functionality
- All current commands work unchanged
- New flags are purely additive features
- Error handling follows existing patterns

## Implementation Notes
- Leverage existing readline prompting for variable editing
- Reuse existing TOML file operations for config.toml
- Follow existing flag parsing patterns for consistency
- Use existing response formatting logic with new configuration layer