# Response Field Extraction Feature

## Overview
Extend the existing `get` command to extract specific fields from stored HTTP response history. This allows users to view individual parts of responses (body, headers, status, etc.) instead of the entire response.

## Current Behavior (Unchanged)
```bash
saul pokeapi get response 1        # Shows entire response #1 in TOML format
saul pokeapi get response          # Shows most recent response in TOML format
saul pokeapi get history           # Lists all responses
```

## New Behavior (To Implement)
```bash
# Extract field from most recent response
saul pokeapi get response body
saul pokeapi get response headers  
saul pokeapi get response status
saul pokeapi get response url

# Extract field from specific response number
saul pokeapi get response1 body
saul pokeapi get response2 headers
saul pokeapi get response3 status
```

## Data Source
Response data is already stored as JSON in `.history/001.json`, `.history/002.json`, etc.:

```json
{
  "timestamp": "2025-01-20T10:30:00Z",
  "method": "GET", 
  "url": "https://pokeapi.co/api/v2/pokemon/pikachu",
  "status": "200 OK",
  "duration": "0.234s",
  "headers": {
    "Content-Type": "application/json",
    "Server": "nginx"
  },
  "body": {
    "name": "pikachu",
    "id": 25,
    "types": [{"slot": 1, "type": {"name": "electric"}}]
  }
}
```

## Supported Fields
- `body` - JSON response body (convert to TOML for display)
- `headers` - HTTP response headers (convert to TOML for display)  
- `status` - HTTP status code and message (display as plain text)
- `url` - Request URL (display as plain text)
- `method` - HTTP method (display as plain text)
- `duration` - Response time (display as plain text)

## Implementation Approach

### 1. Command Parsing
- Modify `get.go` to detect compound targets like `response1`, `response2`
- Parse field name from `KeyValuePairs[0].Key`

### 2. Field Extraction Logic
```go
// Extract field from loaded JSON response
switch fieldName {
case "body":
    fieldData, _ = json.Marshal(response.Body)
    // Convert to TOML using existing formatAsToml()
case "headers": 
    fieldData, _ = json.Marshal(response.Headers)
    // Convert to TOML using existing formatAsToml()
case "status", "url", "method", "duration":
    // Display as plain text
}
```

### 3. Code Reuse
**Reuse existing functions:**
- `presets.LoadHistoryResponse(preset, number)` - Load JSON response
- `formatAsToml(jsonData)` from `handlers/http/response.go` - JSON to TOML conversion
- `fmt.Print()` for plain text display
- `ParseResponseNumber()` for number parsing
- `GetMostRecentResponseNumber()` for default response

### 4. Target Detection Logic
```go
// In get.go handleResponseTarget() function
if target == "response" {
    // Existing behavior: get response [number]
    return getResponse(cmd)
} else if strings.HasPrefix(target, "response") && len(target) > 8 {
    // New behavior: response1, response2, etc.
    numberStr := target[8:] // Extract "1" from "response1"
    number, _ := strconv.Atoi(numberStr)
    return getResponseField(cmd.Preset, number, cmd.KeyValuePairs, cmd.RawOutput)
}
```

## Expected Output Examples

```bash
$ saul pokeapi get response1 body
name = "pikachu"
id = 25

[[types]]
slot = 1

[types.type]
name = "electric"

$ saul pokeapi get response1 headers  
Content-Type = "application/json"
Server = "nginx"

$ saul pokeapi get response1 status
200 OK

$ saul pokeapi get response1 url
https://pokeapi.co/api/v2/pokemon/pikachu
```

## Files to Modify
- `src/project/handlers/commands/get.go` - Add field extraction logic
- No parser changes needed - existing parser already handles the syntax

## Key Requirements
1. **Zero Breaking Changes** - All existing `get response` commands continue working
2. **Consistent Display** - Use same TOML formatting as regular responses for complex fields
3. **Simple Implementation** - Leverage existing JSON loading and TOML conversion code
4. **Error Handling** - Handle missing responses and invalid field names gracefully

## Success Criteria
- `saul get response body` shows body of most recent response in TOML
- `saul get response1 headers` shows headers of response #1 in TOML
- `saul get response status` shows status as plain text
- All existing response commands continue working unchanged